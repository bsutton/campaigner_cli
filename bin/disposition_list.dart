#! /usr/bin/env dcli

import 'dart:io';

import 'package:args/args.dart';

// ignore: prefer_relative_imports
import 'package:dcli/dcli.dart' hide Settings;
import 'package:noojee_campaigner_cli/noojee_campaigner_cli.dart';

import 'package:dcli/src/util/parser.dart';

/// dcli script generated by:
/// dcli create inject.dart
///
/// See
/// https://pub.dev/packages/dcli#-installing-tab-
///
/// For details on installing dcli.
///

void main(List<String> args) {
  var parser = ArgParser();

  parser.addOption('template',
      abbr: 't', help: 'Campaign Template ID', mandatory: true);

  ArgResults parsed;

  try {
    parsed = parser.parse(args);
  } on FormatException catch (e) {
    printerr(red(e.message));
    showUsage(parser);
    exit(1);
  }

  var templateId = int.tryParse(parsed['template'] as String);
  if (templateId == null) {
    printerr(red('The template must be an integer'));
    showUsage(parser);
  }

  var settings = Settings.load();
  var apiKey = settings.apiKey;
  var url = settings.url;

  var uri = Uri.encodeFull(
      '$url/servicemanager/rest/CampaignAPI/getDispositionList?apiKey=$apiKey&fTemplateId=$templateId');

  withTempFile((jsonFile) {
    fetch(url: uri, saveToPath: jsonFile);
    var lines = read(jsonFile).toList();
    final jsonMap = Parser(lines).jsonDecode() as Map<String, dynamic>;

    for (var entity in jsonMap['entities']) {
      print('id: ${entity['id']} name: "${entity['name']}"');
    }
  }, create: false);
}

/// Show useage.
void showUsage(ArgParser parser) {
  print('Usage: disposition_list.dart -t <templateid>');
  print('Retrieves a list of dispositions for the passed campaign template.');
  print(parser.usage);
  exit(1);
}
