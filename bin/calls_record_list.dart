#! /usr/bin/env dcli

import 'dart:io';

import 'package:args/args.dart';
// ignore: prefer_relative_imports
import 'package:dcli/dcli.dart' hide Settings;
import 'package:dcli/src/util/parser.dart';

import 'package:campaigner/campaigner.dart';

/// dcli script generated by:
/// dcli create inject.dart
///
/// See
/// https://pub.dev/packages/dcli#-installing-tab-
///
/// For details on installing dcli.
///

void main(List<String> args) {
  var parser = ArgParser();
  parser.addOption('template',
      abbr: 't', help: 'Campaign Template ID', mandatory: true);
  parser.addOption('campaign', abbr: 'c', help: 'Campaign ID', mandatory: true);

  parser.addMultiOption('dispositions',
      abbr: 'd',
      help: 'A comma separated list of dispositions',
      valueHelp: 'disposition');

  ArgResults parsed;

  try {
    parsed = parser.parse(args);
  } on FormatException catch (e) {
    printerr(red(e.message));
    showUsage(parser);
    exit(1);
  }

  var templateId = int.tryParse(parsed['template'] as String);
  if (templateId == null) {
    printerr(red('The template must be an integer'));
    showUsage(parser);
  }

  var campaignId = int.tryParse(parsed['campaign'] as String);
  if (campaignId == null) {
    printerr(red('The campaign must be an integer'));
    showUsage(parser);
  }

  if (!parsed.wasParsed('dispositions')) {
    printerr(red('You must pass a disposition'));
    showUsage(parser);
  }

  final dispositions = <int>[];
  final _dispositions = parsed['dispositions'] as List<String>;
  for (final disposition in _dispositions) {
    var dispositionId = int.tryParse(disposition);
    if (dispositionId == null) {
      printerr(red('The disposition $disposition is not an integer'));
      showUsage(parser);
      exit(1);
    }
    dispositions.add(dispositionId);
  }

  if (dispositions.isEmpty) {
    printerr(red('You must pass at least one disposition'));
    showUsage(parser);
    exit(1);
  }

  var settings = Settings.load();
  var apiKey = settings.apiKey;
  var url = settings.url;

  var dispArg = StringBuffer();

  for (final disposition in dispositions) {
    if (dispArg.isEmpty) {
      dispArg.write('fDispositions=');
    } else {
      dispArg.write(',');
    }
    dispArg.write('$disposition');
  }

  var uri = Uri.encodeFull(
      '$url/servicemanager/rest/CampaignAPI/getCallRecordList?apiKey=$apiKey&fTemplateId=$templateId&fCampaignId=$campaignId&$dispArg');
  print('Calling');
  print(uri.toString());

  withTempFile((jsonFile) {
    fetch(url: uri, saveToPath: jsonFile);
    var lines = read(jsonFile).toList();
    final jsonMap = Parser(lines).jsonDecode() as Map<String, dynamic>;

    // get list of call records
    var records = jsonMap['entities'] as List;

    if (records.isEmpty) {
      print(orange('No records returned'));
    }
    var count = 0;
    for (final _record in records) {
      {
        print(orange('*' * 80));
        print(orange('** $count **'));
        print(orange('*' * 80));
        final record = _record as Map<String, dynamic>;
        var keys = record.keys.toList()..sort();
        for (final key in keys) {
          print('$key: ${record[key]}');
        }
        count++;
      }
    }
  }, create: false);
}

/// Show useage.
void showUsage(ArgParser parser) {
  print('Usage: call_record_list.dart -t <templateid> -c <campaignid>');
  print(
      'Fetches a list of calls against a specific allocation with on of the passed dispositions');
  print(parser.usage);
  exit(1);
}
